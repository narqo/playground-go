package main

import (
	"fmt"
	"io"
	"net/http"
	"time"
)

func main() {
	setupApp()
	http.ListenAndServe("localhost:8080", nil)
}

func setupApp() {
	Handle("/event", EventHandler)
	Handle("/session", SessionHandler)
}

type Session struct {
	AppToken    string    `form:"app_token"`
	Environment string    `form:"environment"`
	CreatedAt   time.Time `form:"-"`
	ReceivedAt  time.Time `form:"-"`
}

func SessionHandler(w http.ResponseWriter, r *http.Request, form FormData[Session]) error {
	return writef(w, "session", form)
}

type Event struct {
	AppToken    string    `form:"app_token"`
	EventToken  string    `form:"event_token"`
	Environment string    `form:"environment"`
	CreatedAt   time.Time `form:"-"`
	ReceivedAt  time.Time `form:"-"`
}

func EventHandler(w http.ResponseWriter, r *http.Request, form FormData[Event]) error {
	if form.AppToken == "abc123" {
		return writef(w, "event(abc123)", form)
	}
	return writef(w, "event", form)
}

func writef[T any](w io.Writer, prefix string, form FormData[T]) error {
	_, err := fmt.Fprintf(w, "%s(%T): %+v", prefix, form.T, form.T)
	return err
}

/*
type sdkActivity interface {
	type Event, Session
}

// q := `app_token=abc123&token=event_token&created_at=2021-03-21T11:00:00.000Z`
func parseQuery[T sdkActivity](q string, v *T) error {
	vals, _ := url.ParseQuery(q)
	_ = vals

	if vv, ok := (interface{})(v).(FromQuery); ok {
		vv.FromQuery(vals)
		return nil
	}

	return nil
}
*/
